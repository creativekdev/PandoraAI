// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:cartoonizer/models/discovery_comment_list_entity.dart';
import 'package:cartoonizer/models/discovery_list_entity.dart';
import 'package:cartoonizer/models/msg_entity.dart';
import 'package:cartoonizer/models/page_entity.dart';
import 'package:cartoonizer/models/push_extra_entity.dart';
import 'package:cartoonizer/models/rate_config_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(DiscoveryCommentListEntity).toString(): DiscoveryCommentListEntity.fromJson,
		(DiscoveryListEntity).toString(): DiscoveryListEntity.fromJson,
		(DiscoveryResource).toString(): DiscoveryResource.fromJson,
		(MsgEntity).toString(): MsgEntity.fromJson,
		(PageEntity).toString(): PageEntity.fromJson,
		(MsgPageEntity).toString(): MsgPageEntity.fromJson,
		(PushExtraEntity).toString(): PushExtraEntity.fromJson,
		(RateConfigEntity).toString(): RateConfigEntity.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<DiscoveryCommentListEntity>[] is M){
			return data.map<DiscoveryCommentListEntity>((Map<String, dynamic> e) => DiscoveryCommentListEntity.fromJson(e)).toList() as M;
		}
		if(<DiscoveryListEntity>[] is M){
			return data.map<DiscoveryListEntity>((Map<String, dynamic> e) => DiscoveryListEntity.fromJson(e)).toList() as M;
		}
		if(<DiscoveryResource>[] is M){
			return data.map<DiscoveryResource>((Map<String, dynamic> e) => DiscoveryResource.fromJson(e)).toList() as M;
		}
		if(<MsgEntity>[] is M){
			return data.map<MsgEntity>((Map<String, dynamic> e) => MsgEntity.fromJson(e)).toList() as M;
		}
		if(<PageEntity>[] is M){
			return data.map<PageEntity>((Map<String, dynamic> e) => PageEntity.fromJson(e)).toList() as M;
		}
		if(<MsgPageEntity>[] is M){
			return data.map<MsgPageEntity>((Map<String, dynamic> e) => MsgPageEntity.fromJson(e)).toList() as M;
		}
		if(<PushExtraEntity>[] is M){
			return data.map<PushExtraEntity>((Map<String, dynamic> e) => PushExtraEntity.fromJson(e)).toList() as M;
		}
		if(<RateConfigEntity>[] is M){
			return data.map<RateConfigEntity>((Map<String, dynamic> e) => RateConfigEntity.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}